<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[CSS部分兼容写法]]></title>
      <url>%2Fmyblog%2Fblog%2Fcss%E7%9A%84%E9%83%A8%E5%88%86%E5%85%BC%E5%AE%B9%E5%86%99%E6%B3%9520161130%2F</url>
      <content type="text"><![CDATA[CSS的部分兼容写法火狐与IE浏览器之间关于width的不同定义CSS ’width’ 指的是标准CSS中所指的width的宽度， 在firefox中的宽度就是这个宽度。它只包含容器中内容的宽度。 而Internet Explorer ’width’则是指整个容器的宽度，包括内容，padding ，border。 Firefox中：容器占的宽度=内容宽度+padding宽度+border宽度 IE中：内容宽度=您定义的容器宽度(Internet Explorer ’width’)-padding宽度-border宽度 所以，如果IE中定义 width:120px;padding:5px 的话，所显示的宽度就是120px. 即padding:5px是在width里面。 而Firefox中，上面这个定义，显示宽度就是 130 px; 所以，我们就必须这样定义 1width:115px !important;width:120px;padding:5px; hack由于不同的浏览器，比如Internet Explorer 6,Internet Explorer 7,Mozilla Firefox等，对CSS的解析认识不一样，因此会导致生成的页面效果不一样，得不到我们所需要的页面效果。 这个时候我们就需要针对不同的浏览器去写不同的CSS，让它能够同时兼容不同的浏览器，能在不同的浏览器中也能得到我们想要的页面效果。 这个针对不同的浏览器写不同的CSS code的过程，就叫CSS hack,也叫写CSS hack !important这个规则对Ie6.0,Ie7.0和Firefox能写hack *对于Ie系列浏览器都能够识别， firefox 浏览器则不能识别; !important只有Ie7.0和firefox可以识别，但是Ie6.0不能成功应用. 1 区别ie与firefox的hack为: 1border:2px solid #f00;*border:1px solid #f00; 2 区别Ie6.0 与Ie7.0、firefox的hack为: 1border:1px solid #f00!important;border:2px solid #f00; 在(1)中，之所以’*‘把放在后面是因为ff不识别,而导致只对它设置了一次border;而ie 系列进行了两次border设置后，后一个属性覆盖了前一个属性，故为一像素的边框。 在(2)中，之所以把!important放在第一个border 设置，是因为它把这次border的优先级提高了，即使后面在一次甚至在N次设置border 也无效，但是Ie6.0对这个规则不接受，而导致它应用了第二次的border 设置，也就是第二次覆盖了第一次的这一原理， 并不是它不识别!important;所以它的border为2 像素的红框. 部分hack写法总结：123456789#box&#123; color:red; //所有浏览器都支持 color:red !important; //Firefox、IE7支持 _color:red; //IE6支持 *color:red; //IE6、IE7支持 *+color:red; //IE7支持 color:red \9; //IE6、IE7、IE8支持 color:red \0; //IE8支持&#125; 网站如何同时兼容IE6、IE7、IE8 第一招：给常用CSS规定属性值。body,div,dl,dt,dd,ol,h1,h2,h3,h4,h5,h6,form,input,p,th,td{margin:0;padding:0;}img{border:0px;}ul {margin:0px;padding:0px;}/ul li {list-style:none;}上面的建站常用代码就相是格式化CSS样式，让各浏览器按照我们设置的属性值渲染网页 第二招：IE和FF下对象居中问题 IE下大家应该知道只要设置 1body&#123;text-align:center;&#125; 这样就可以居中显示。但是这样的方法在FF不行的。这里就需要给修改成1body:&#123;text-align:center;margin:0px auto;&#125;Margin 意思就是上下距离为0像素，左右为自动。所以FF就会居中显示。 第三招：垂直居中（仅只用于一行） 比如说一个高30px的div，默认是会显示在左上角，如果想垂直居中对其可以加个line-height:30px;样式。 如果你想让他居下方则在修改line-height:30px;数值越大越局下，为了防止撑破层，还需要再给一个样式overflow:hidden;(超出的部分不显示) 第四招：给每一个块对象设置三个样式 即便高、宽是属性值是自动那么也需要去设置这三个样式。目的就是解决浏览器默认值的问题。 第五招：针对IE6、IE7、FF的css样式(这一招在特殊情况下经常用到) 原来建设网站经常使用!important来设置优先权，但有了IE7之后就不行了。 下面给大家个可以解决IE6、IE7、FF各个CSS优先权的方法 #1 { color: #333; } FF环境 \* html #1 { color: #666; } IE6环境 \*+html #1 { color: #999; } IE7环境 上面的书写顺序一定不能去改变。 这样子网页在FF下显示#333，IE6下显示#666，IE7下显示#999; -moz代表firefox浏览器私有属性-ms代表IE浏览器私有属性-webkit代表chrome、safari私有属性]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTML5]]></title>
      <url>%2Fmyblog%2Fblog%2Fhtml5%E7%9A%84%E5%A4%87%E5%BF%98%E5%BD%9520161129%2F</url>
      <content type="text"><![CDATA[HTML5的备忘录HTML5是现在前端开发人员必备技能。 HTML本来不会活过21世纪的。网页规范的制定者W3C组织，早在1998年就已经对HTML撒手不管了。W3C把未来都寄托在XHTML这个更具现代特色的后续规范上，XHTML被视为HTML的严肃整洁版，但XHTML举步维艰。当XHTML举步维艰的时候，有那么一群人(来自欧朋(OPera)\/火狐(fireFox)\/苹果(safari)的一些具有开发者自行组建了WHATWG(Web Hypertext Application Technology Working Group超文本应用技术工作组))开始寻找新的解决方案，这就奠定了HTML5的的前身。 HTML5诞生于2004年 HTML5的规范正式公布于2014年 OK 我们开始吧首先是HTML5的结构 文档类型声明 1&lt;!DOCTYPE HTML&gt; //相比于html4除去了约束和版本号 字符编码 1&lt;meta charset=&quot;utf-8&quot;&gt;//声明字符集的编码 HTML5的语法规则相比较HTML4更加松散 总结： 如何区分HTML和HTML5？ html5的文档声明去除了约束和版本号，html5的字符编码更加简洁 DOCTYPE是什么？ DOCTYPE是文档类型声明 HTML5有哪些新特性？ 新增了语义化标签,多媒体,地理定位,离线存储,canvas 在开始H5的新特性之前先提一下腻子脚本(polyfill)以及IE版本条件注释 IE条件注释功能是条件注释是IE特有的一种功能，能对IE系列产品进行单独的XHTML代码处理，注意，主要是针对XHTML,而非CSS。条件注释功能非常强大，可以进行true和false判断。 主要是针对ie6 7 8对支持和让老浏览器支持html5+css3的一些js脚本所以这两个东西肯定都是为了兼容老版本的IE浏览器的 语法如下： lte：就是Less than or equal to的简写，也就是小于或等于的意思。 lt ：就是Less than的简写，也就是小于的意思。 gte：就是Greater than or equal to的简写，也就是大于或等于的意思。 gt ：就是Greater than的简写，也就是大于的意思。 ! ：就是不等于的意思，跟javascript里的不等于判断符相同 12345678&lt;!--[if IE]&gt;&lt;![endif]--&gt;&lt;!--[if lte IE 8]&gt; 如果IE小于等于IE8&lt;script type=&quot;text/javascript&quot; src=&quot;html5shiv.js&quot;&gt;&lt;/script&gt;//引用的这个js就是一个比较好用的腻子脚本&lt;![endif]--&gt; 然后下面开始是HTML5的新特性： 新的语义化标签 语义化标签的含义？ 答:通过标签就能明白标签中所包含的内容的这样的标签 使用语义化标签的好处 可以让文档更加清晰简洁 可以让开发者更加容易修改和维护 可以让索搜引擎和残障人士更好的获取网页信息 新增了哪些语义化标签 主要的： Headerd 定义section或page的页眉—–页面的头部 Nav 定义导航链接.一般定义导航 main 定义主要区域 section 定义文档中的节 aside 定义内容之外的内容，侧边栏 footer 定义section或者page的页脚 提问使用这些新的语义化标签跟我们之前使用div有什么区别？ 为了被搜索引擎更好的检索 为了浏览器实现特定功能（比如阅读功能） 便于编程人员理解（即使是html5，光靠标签的语义也不够，还是要靠id、name甚至class的css命名来综合体现） 次要的：Article 定义文章Mark 定义有记号的文本Figure 定义媒介内容的分组,以及它们的标题figcaption 定义figure元素的标题details 定义元素的细节summary 定义可见的&lt;details&gt;元素标题progress 定义任何类型的任务的进度====&gt;进度条 新的表单 input 类型 -email邮箱类型 123&lt;lable&gt; &lt;input type=&quot;email&quot; name = &quot;email&quot; class = &quot;email&quot;&gt;;&lt;/lable&gt;; input 类型 -url 网址 123&lt;lable&gt; &lt;input type=&quot;url&quot; name = &quot;url&quot; class = &quot;url&quot;&gt;;&lt;/lable&gt;; input 类型 -search 搜索框 123&lt;lable&gt; &lt;input type=&quot;search&quot; name = &quot;search&quot; class = &quot;search&quot;&gt;;&lt;/lable&gt;t; input 类型 - number(value,max,min,step(数字的间隔)) 123&lt;lable&gt;&lt;input type=&quot;number&quot; name = &quot;number&quot; class = &quot;number&quot; min=&quot;0&quot; max = &quot;100&quot; step = &quot;2&quot;&gt;&lt;/lable&gt; input 类型 -range(value,max,min,step)滑块 123&lt;lable&gt; &lt;input type=&quot;range&quot; name = &quot;range&quot; class = &quot;range&quot; min=&quot;2&quot; max=&quot;100&quot; step=&quot;2&quot;&gt;&lt;/lable&gt; Input 类型 - Date Pickers（time, date, month, week, datetime-local） 多媒体（视频与音频） Canvas绘图 数据存储 离线应用 地理定位 酷炫狂拽屌炸天的CSS特效]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JS兼容写法]]></title>
      <url>%2Fmyblog%2Fblog%2Fjs%E7%9A%84%E9%83%A8%E5%88%86%E5%85%BC%E5%AE%B9%E5%86%99%E6%B3%9520161129%2F</url>
      <content type="text"><![CDATA[JS的部分兼容写法认识DOM0级方法跟DOM2级方法DOM0就是直接通过 onclick写在html里面的事件, 比如:1&lt;input onclick=&quot;alert(1)&quot; /&gt; DOM2是通过addEventListener绑定的事件, 还有IE下的DOM2事件通过attachEvent绑定; ①添加事件方法 addEventListener(type,handler,false)方法用于向指定元素添加事件句柄 三个参数分别是： event:必传,字符串,指定事件名。注意: 不要使用 “on” 前缀。 例如，使用 “click” ,而不是使用 “onclick”。提示: 所有 HTML DOM 事件; function:必传。指定要事件触发时执行的函数。 当事件对象会作为第一个参数传入函数。 事件对象的类型取决于特定的事件。例如， “click” 事件属于 MouseEvent(鼠标事件) 对象 useCapture:可选，是否在捕获或冒泡阶段执行 为bool值 123456789addHandler：function(element,type,handler)&#123; if(element.addEventListener)&#123;//检测是否为DOM2级方法 element.addEventListener(type, handler, false); &#125;else if (element.attachEvent)&#123;//检测是否为IE级方法 element.attachEvent(&quot;on&quot; + type, handler); &#125; else &#123;//检测是否为DOM0级方法 element[&quot;on&quot; + type] = handler; &#125;&#125; ②移除之前添加的事件方法12345678removeHandler：function(element, type, handler)&#123; if (element.removeEventListener)&#123; element.removeEventListener(type, handler, false); &#125; else if (element.detachEvent)&#123; element.detachEvent(&quot;on&quot; + type, handler); &#125; else &#123; element[&quot;on&quot; + type] = null; &#125;&#125; ③获取事件及事件对象目标 获取事件对象的兼容性写法12345getEvent: function(event)&#123; return event ? event : window.event;&#125; 获取事件对象目标的兼容性写法123getTarget: function(event)&#123; return event.target || event.srcElement; &#125; ④阻止浏览器默认事件的兼容性写法123456preventDefault: function(event)&#123; if (event.preventDefault)&#123; event.preventDefault(); &#125; else &#123; event.returnValue = false; &#125; &#125; ⑤阻止事件冒泡的兼容性写法123456stopPropagation: function(event)&#123; if (event.stopPropagation)&#123; event.stopPropagation(); &#125; else &#123; event.cancelBubble = true; &#125; &#125; ⑥mouseover和mouseout 事件才包含的获取相关元素的方法 //mouseover和mouseout 事件才包含的获取相关元素的方法getRelatedTarget: function(event){ if (event.relatedTarget){ return event.relatedTarget; } else if (event.toElement){ return event.toElement; } else if (event.fromElement){ return event.fromElement; } else { return null; }} ⑦鼠标滚轮判断 对于mousedown 和mouseup 事件来说，则在其event 对象存在一个button 属性，表示按下或释放的按钮。 DOM的button 属性可能有如下3 个值： 0 表示主鼠标按钮， 1 表示中间的鼠标按钮（鼠标滚轮按钮）， 2 表示次鼠标按钮。 在常规的设置中，主鼠标按钮就是鼠标左键，而次鼠标按钮就是鼠标右键。IE8 及之前版本也提供了button 属性，但这个属性的值与DOM 的button 属性有很大差异. 0：表示没有按下按钮。 1：表示按下了主鼠标按钮。 2：表示按下了次鼠标按钮。 3：表示同时按下了主、次鼠标按钮。 4：表示按下了中间的鼠标按钮。 5：表示同时按下了主鼠标按钮和中间的鼠标按钮。 6：表示同时按下了次鼠标按钮和中间的鼠标按钮。 7：表示同时按下了三个鼠标按钮。12345678910111213141516171819getButton: function(event)&#123; if(document.implementation.hasFeature(&quot;MouseEvents&quot;, &quot;2.0&quot;))&#123; return event.button; &#125; else &#123; switch(event.button)&#123; case 0: case 1: case 3: case 5: case 7: return 0; case 2: case 6: return 2; case 4: return 1; &#125; &#125;&#125; ⑧能够取得鼠标滚轮增量值（delta）的方法12345getWheelDelta: function(event)&#123; if (event.wheelDelta)&#123; return (client.engine.opera &amp;&amp; client.engine.opera &lt; 9.5 ? - event.wheelDelta : event.wheelDelta); &#125; else &#123; return -event.detail * 40;//firefox中的值为+3表示向上滚，-3表示向下滚 &#125;&#125; ⑨跨浏览器的方式取得字符编码1234567getCharCode: function(event)&#123; if (typeof event.charCode == &quot;number&quot;)&#123; return event.charCode; &#125; else &#123; return event.keyCode; &#125;&#125; ⑩访问剪贴板中的数据1234getClipboardText: function(event)&#123; var clipboardData = (event.clipboardData || window.clipboardData); return clipboardData.getData(&quot;text&quot;); &#125; 11.设置剪贴板中的数据1234567setClipboardText: function(event, value)&#123; if (event.clipboardData)&#123; return event.clipboardData.setData(&quot;text/plain&quot;, value); &#125; else if (window.clipboardData)&#123; return window.clipboardData.setData(&quot;text&quot;, value); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[网页通过w3c标准]]></title>
      <url>%2Fmyblog%2Fblog%2F%E7%BD%91%E9%A1%B5%E9%80%9A%E8%BF%87w3c%E6%A0%87%E5%87%8620161129%2F</url>
      <content type="text"><![CDATA[W3C标准万维网联盟标准。 万维网联盟（外语缩写：W3C）标准不是某一个标准，而是一系列标准的集合。网页主要由三部分组成： 结构(Structure) 表现（Presentation） 行为（Behavior） 对应的标准也分三方面： 结构化标准语言主要包括XHTML和XML， 表现标准语言主要包括CSS， 行为标准主要包括对象模型（如W3C DOM）、ECMAScript等。这些标准大部分由W3C起草和发布，也有一些是其他标准组织制订的标准，比如ECMA（European Computer Manufacturers Association）的ECMAScript标准。 网页通过W3C标准的步骤： 图片的alt=””属性必须每张图片都加上,而且对齐属性用CSS来定义。不加不能通过XHTML1.0验证。 每个文档必须加上DTD声明1&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTDXHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; 去掉后能通过验证，但有警告：No DOCTYPE found! Checking with default XHTML 1.0 Transitional Document Type。 RSS的XML通过时其中的域名地址必须与检测的地址一致,否则报错. 标签的链接属性加上JAVASCRIPT事件时必须为#空链,不能为javascript:;或javascript:void(null); 同一个页面当中，同名的ID会产生冲突。所以以ID定义样式的必须改成类引用。 1&lt;div id=&quot;a1&quot;&gt;111&lt;/div&gt; &lt;div id=&quot;a1&quot;&gt;222&lt;/div&gt; 如果不用W3C来检测的话，在CSS设计里是允许这样做的。 那是程序的角度不能相同，CSS上是可以相同的! 之前就是相同的产生问题，后面就改成类引用了!(简单的说就是id必须要是单一的不能重复 如果重复就使用class) 不可以省略双引号或者单引号 标签之间不可错位嵌套。123456&lt;div class=&quot;CaseDetaListSS&quot;&gt;原文链接：&lt;a href=&apos;/html/cases/cases_61.html&apos;&gt;官方网站&lt;/div&gt;&lt;/a&gt; 不允许这样。 所有标签必须都使用小写 FLASH的标签代码中不能含有,必须采用其它的方法实现。 所有的标签中含有的属性必须有值(官方的说法)。 标签必须配对完成,单标签必须以/关闭 JS和CSS外部引入文件必须加上类型定义: 12&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;style type=&apos;text/css&apos;&gt;&lt;/style&gt; 所有的样式全部写在外部文件。用类名定义。在使用的地方引用。 页面上的一些特殊字符必须用HTML代码来标识.如“&amp;”写成“&amp;“ 显示结果 说明 Entity Name Entity Number 空格 &amp;nbsp; &amp;#160; &lt; 小于 &amp;lt; &amp;#60; &gt; 大于 &amp;gt; &amp;#62; &amp; &amp;符号 &amp;amp; &amp;#38; “ 双引号 &amp;quot; &amp;#34; x 乘号 &amp;times; &amp;#215; ÷ 除号 &amp;divide; &amp;#247;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git+hexo搭建博客步骤]]></title>
      <url>%2Fmyblog%2Fblog%2Fgit-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A420161125%2F</url>
      <content type="text"><![CDATA[配置git在服务器根目录下 打开gitbash依次输入 mkdir &apos;目录名&apos; cd &apos;目录名&apos; git init git checkout --orphan gh-pages git add -A git commit -m &apos;我的博客&apos; git remote add origin 仓库的ssh地址 git push origin gh-pages ssh-keygen -t rsa 配置hexo在桌面win+R 输入 cmd 回车 跳出命令行 依次输入 npm install hexo-cli -g hexo init blog cd blog npm install hexo server hexo new 目录名 npm install hexo-deployer-git --save 配置博客博客根目录-_config.yml type:git repo:(在github新建的仓库的ssh地址) branch:master hexo g hexo d 主题文件夹(比如&apos;next&apos;)放到博客根目录themes文件夹中 然后在配置文件中66行 theme:next 主题模式在next文件夹中60行进行更改 一些可能会出现的问题1 hexo 本地没问题，github不显示博客主题 解决方法： 更改博客目录_config.yml文件中的url和root属性。 url: https://用户名.github.io/博客名/ root: /博客名 然后重新部署一下就成功了。 如果上步没成功继续更改博客目录-public中vendors文件名，一般改为lib 接着按照下面更改 12345678C:\Users\UPC\Documents\hexo\themes\next\.bowerrc: 2: "directory": "source/vendors" C:\Users\UPC\Documents\hexo\themes\next\_config.yml: 89: vendors: vendors C:\Users\UPC\Documents\hexo\themes\next\bower.json: 22: "source/vendors", 12345678C:\Users\UPC\Documents\hexo\themes\next\.bowerrc:2: "directory": "source/lib" C:\Users\UPC\Documents\hexo\themes\next\_config.yml:89: vendors: libC:\Users\UPC\Documents\hexo\themes\next\bower.json:22: "source/lib", 接着 hexo clean hexo g hexo d 2 博客页面有可能会显示德文 解决方法： next文件夹-language文件夹-zh-Hans.yml 重命名 zh-CN.yml博客根目录_config.yml-language: zh-CN hexo clean hexo s 参考资料hexo+git next next 配置]]></content>
    </entry>

    
  
  
</search>
